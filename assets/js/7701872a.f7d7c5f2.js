"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[2420],{4852:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>c,contentTitle:()=>a,default:()=>o,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"api-reference/hierarchy","title":"Hierarchy","description":"The A5 tiling system supports subdividing the world all the way from a single cell for the whole planet to milimeter-scale leaf cells.","source":"@site/../docs/api-reference/hierarchy.md","sourceDirName":"api-reference","slug":"/api-reference/hierarchy","permalink":"/docs/api-reference/hierarchy","draft":false,"unlisted":false,"editUrl":"https://github.com/felixpalmer/a5/tree/master/website/../docs/api-reference/hierarchy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"sidebar","previous":{"title":"Indexing","permalink":"/docs/api-reference/indexing"}}');var i=n(4848),t=n(8453);const s={},a="Hierarchy",c={},d=[{value:"getResolution",id:"getresolution",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Return value",id:"return-value",level:4},{value:"cellToParent",id:"celltoparent",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Return value",id:"return-value-1",level:4},{value:"cellToChildren",id:"celltochildren",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Return value",id:"return-value-2",level:4}];function h(e){const l={code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l.header,{children:(0,i.jsx)(l.h1,{id:"hierarchy",children:"Hierarchy"})}),"\n",(0,i.jsx)(l.p,{children:"The A5 tiling system supports subdividing the world all the way from a single cell for the whole planet to milimeter-scale leaf cells."}),"\n",(0,i.jsx)(l.p,{children:"The cells are arranged in a logical hierarchy, with each cell having an integer resolution. Each cell has exactly 4 child cells, at the next resolution level, and one parent cell at the previous resolution level."}),"\n",(0,i.jsx)(l.p,{children:"Naturally the single resolution 0 cell, representing the whole world has no parent and similarly leaf cells no children."}),"\n",(0,i.jsx)(l.h3,{id:"getresolution",children:"getResolution"}),"\n",(0,i.jsx)(l.p,{children:"Returns the resolution of an A5 cell"}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-ts",children:"function getResolution(index: bigint): number;\n"})}),"\n",(0,i.jsx)(l.h4,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.code,{children:"index"})," ",(0,i.jsx)(l.strong,{children:"(bigint)"})," A5 cell identifier"]}),"\n"]}),"\n",(0,i.jsx)(l.h4,{id:"return-value",children:"Return value"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.strong,{children:"(number)"})," The resolution level of the cell"]}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"celltoparent",children:"cellToParent"}),"\n",(0,i.jsx)(l.p,{children:"Returns the parent cell of an A5 cell."}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-ts",children:"function cellToParent(index: bigint, parentResolution?: number): bigint;\n"})}),"\n",(0,i.jsx)(l.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.code,{children:"index"})," ",(0,i.jsx)(l.strong,{children:"(bigint)"})," A5 cell identifier"]}),"\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.code,{children:"parentResolution"})," ",(0,i.jsx)(l.strong,{children:"(number, optional)"})," By default one level coarser than input resolution."]}),"\n"]}),"\n",(0,i.jsx)(l.h4,{id:"return-value-1",children:"Return value"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.strong,{children:"(bigint)"})," The parent cell identifier"]}),"\n"]}),"\n",(0,i.jsx)(l.h3,{id:"celltochildren",children:"cellToChildren"}),"\n",(0,i.jsx)(l.p,{children:"Returns the child cells of an A5 cell."}),"\n",(0,i.jsx)(l.pre,{children:(0,i.jsx)(l.code,{className:"language-ts",children:"function cellToChildren(index: bigint, childResolution?: number): bigint[];\n"})}),"\n",(0,i.jsx)(l.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.code,{children:"index"})," ",(0,i.jsx)(l.strong,{children:"(bigint)"})," A5 cell identifier"]}),"\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.code,{children:"childResolution"})," ",(0,i.jsx)(l.strong,{children:"(number, optional)"})," By default one level finer than input resolution."]}),"\n"]}),"\n",(0,i.jsx)(l.h4,{id:"return-value-2",children:"Return value"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsxs)(l.li,{children:[(0,i.jsx)(l.strong,{children:"(bigint[])"})," Array of child cell identifiers"]}),"\n"]})]})}function o(e={}){const{wrapper:l}={...(0,t.R)(),...e.components};return l?(0,i.jsx)(l,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);